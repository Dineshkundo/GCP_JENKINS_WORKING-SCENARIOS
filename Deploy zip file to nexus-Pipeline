pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitInfo = checkout([$class: 'GitSCM', branches: [[name: '*/${branch}']], userRemoteConfigs: [[url: 'https://github.com/summu97/react.js.git']]])
                    def branchName = gitInfo.GIT_BRANCH.tokenize('/')[1]
                    echo "Branch name: ${branchName}"
                    if (branchName == 'master') {
                        env.REPO_NAME = 'master' // GIVE MASTER_BRANCH OUTPUT REPO
                    } else {
                        env.REPO_NAME = 'other' // GIVE OTHER_BRANCH OUTPUT REPO
                    }
                }
            }
        }
        stage('building code') {
            steps {
                sh '''
                npm install
                npm run build
                '''
            }
        }
        stage('creating zip') {
            steps {
                script {
                    def version = "1.${env.BUILD_NUMBER}"
                    def gitInfo = checkout([$class: 'GitSCM', branches: [[name: '*/${branch}']], userRemoteConfigs: [[url: 'https://github.com/summu97/react.js.git']]])
                    def branchName = gitInfo.GIT_BRANCH.tokenize('/')[1]
                    def fileName = branchName == 'master' ? 'package_release' : 'package_snapshot'
                    fileName += "_${version}.zip"
                    sh "zip -r ${fileName} build/"
                    env.ARTIFACT_NAME = fileName
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                script {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '34.118.95.240:8081', //GIVE NEXUS URL
                        groupId: '1.SUMANTH',
                        version: "1.${env.BUILD_NUMBER}",
                        repository: env.REPO_NAME,
                        credentialsId: 'nexus', //GIVE NEXUS CREDENTIALS AS CREDENTIALS IN JENKINS
                        artifacts: [
                            [artifactId: "${env.ARTIFACT_NAME}", file: "${env.ARTIFACT_NAME}"]
                        ]
                    )
                }
            }
        }
    }
}
