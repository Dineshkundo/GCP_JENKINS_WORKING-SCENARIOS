IN SLAVE TERMINAL: generate ssh keys using: ssh-keygen; copy public key in authorized_keys and put private key aside.

		 : create jenkins folder in root and 'chmod 755 /root/jenkins'

Dashboard-->Nodes-->New node-->give name-->Permanent Agent(select)-->create-->Number of executors(2(no of builds you want to perform parallely))-->Remote root directory(/root/jenkins)-->Labels(slave)-->Usage(only build jobs with label expression matching this node)-->Launch method(Launch agents via SSH)-->*Host(private-ip of slave)-->Credentials(jenkins)-->SSH username and private key-->ID(your wish)-->*Username(root)-->Private Key-->Enter directly(paste private key)-->ADD-->Host Key Verification Strategy(non verifying verification strategy)-->Tool Locations(give maven tool location)-->save

NOTE:
make sure to install java, git, maven, Tool Locations.
Also make sure your jenkins server's service account have permissions to login to another server.
NOTE: NOTE: NOTE:
make sure you are giving Tool Locations.
---------------------------------------------------------------------------
pipeline {
    agent {
        label 'slave'
    }
    tools {
        maven 'maven' // Use the name configured in Jenkins
    }
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/summu97/monolythic-project.git'
            }
        }
        stage('package') {
            steps {
                sh 'mvn clean package'
            }
        }
    }
}
---------------------------------------------------------------------------
use below code concepts for future requirements:
---------------------------------------------------------------------------
pipeline {
    agent none
    
    stages {
        stage('Checkout') {
            agent { 
                label 'your-slave-label' // Specify the label of your Jenkins slave node
            }
            steps {
                // Checkout source code from Git repository
                git 'https://github.com/your/repository.git'
            }
        }
        stage('Build') {
            agent {
                label 'your-slave-label' // Specify the label of your Jenkins slave node
            }
            steps {
                // Build your project (e.g., Maven, Gradle, etc.)
                sh 'mvn clean install' // Example command for Maven
            }
        }
        stage('Test') {
            agent {
                label 'your-slave-label' // Specify the label of your Jenkins slave node
            }
            steps {
                // Run tests (e.g., unit tests, integration tests, etc.)
                sh 'mvn test' // Example command for running tests with Maven
            }
        }
        // Add more stages as needed for deployment, publishing artifacts, etc.
    }
    
    post {
        success {
            // Actions to perform when the pipeline succeeds (e.g., notifications)
            echo 'Pipeline succeeded!'
        }
        failure {
            // Actions to perform when the pipeline fails (e.g., notifications, cleanup)
            echo 'Pipeline failed!'
        }
    }
}

